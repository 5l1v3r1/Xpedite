"""
Adapter to collect profile data and html reports for jupyter integration

This module provides classes to collect profile, flot and html data for rendering in jupyter
The html reports are compressed and aggregated with adjacent flot data for reporting.

Author: Manikandan Dhamodharan, Morgan Stanley
"""

import zlib
import base64
import logging

LOGGER = logging.getLogger(__name__)

class Flot(object):
  """Class to store data for creating latency distribution visualizations"""

  def __init__(self, name, description, data, statistics, width, height, options, checked):
    self.name = name
    self.description = description
    self.data = data
    self.statistics = statistics
    self.width = width
    self.height = height
    self.options = options
    self.checked = checked

class Report(object):
  """Class to store compressed html reports"""

  def __init__(self, name, description, zContent):
    self.name = name
    self.description = description
    self.zContent = zContent

class Reportcell(object):
  """Class to store profile results for a category"""

  def __init__(self, flot):
    self.flot = flot
    self.htmlReport = []

class Result(object):
  """Class to store profile results for the current session"""

  def __init__(self):
    self.reportCells = []
    self.envReport = None

  def __getattr__(self, attr):
    return None

  def attachXpediteReport(self, _, title, description, content):
    """
    Attaches a html report to this result object

    :param description: description of the report
    :param title: title of the report
    :param content: html content of the report

    """
    zContent = zlib.compress(content)
    zContent = base64.b64encode(zContent)
    report = Report(title, description, zContent)
    if title == 'Test Environment Report':
      self.envReport = report
    else:
      try:
        self.reportCells[len(self.reportCells) - 1].htmlReport.append(report)
      except IndexError as ex:
        LOGGER.exception('No report data generated by the Profiler')
        raise ex

  def flot(self, name, description, data, options, statistics=None, width=1000, height=500, checked=None):
    """
    Adds a new latency distribution visaulization to this result object

    :param name: Category of the histogram
    :param description: Description of the histogram
    :param width: Width of the histogram (Default value = 1000)
    :param height: Height of the histogram (Default value = 500)

    """
    flot = Flot(name, description, data, statistics, width, height, options, checked)
    reportcell = Reportcell(flot)
    self.reportCells.append(reportcell)

  def commitXpediteReport(self, app, profiles, reportName):
    """Commits results"""
    pass

  @staticmethod
  def le(reference, _=None):
    """less than or equals comparator"""
    def _func(value, name=None, *args, **kwargs): # pylint: disable=unused-argument
      return value <= reference
    return _func
