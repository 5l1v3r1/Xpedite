"""
This module contains various functions used in testing xpedite profiling, including
xpedite record, report and profile info generation, as well as loading profile and application
information from remote or local hosts.

Author:  Brooke Elizabeth Cantwell, Morgan Stanley
"""

import os
from app import TargetLauncher
from xpedite.profiler.probeAdmin import ProbeAdmin

testDir = os.path.abspath(os.path.dirname(__file__))
dataDir = os.path.join(testDir, '..', 'data')

def loadProfileInfo(profileInfoPath, remote=None):
  """
  Load profile information from a profileInfo.py file, set a default application information
  file, and set the profile information's host if the application is running remotely

  @param remote: Remote environment information if a remote host is passed to the pytest parser
  @type remote: C{xpedite.transport.remote.Remote}
  """
  from xpedite.profiler.profileInfo import loadProfileInfo
  profileInfo = loadProfileInfo(os.path.join(dataDir, profileInfoPath))
  profileInfo.appInfo = os.path.join(dataDir, 'xpedite-appinfo.txt')
  if remote:
    profileInfo.appHost = remote.host
  return profileInfo

def generateProfiles(app, profileInfo):
  """
  Start Xpedite profiling and return the profiles and result generating by profiling

  @param app: An xpedite application
  @type app: C{xpedite.app.XpediteApp} or C{xpedite.app.XpediteDormantApp}
  @param profileInfo: Profile information generated by xpedite
  @type profileInfo: C{xpedite.profileInfoLoader.ProfileInfo}
  """

  from xpedite.jupyter.result    import Result
  from xpedite.profiler import profile
  result = Result()
  profiler = profile(
    app=app, profileInfo=profileInfo, reportName='XpediteTest', reportPath=None,
    dryRun=app.dryRun, result=result, interactive=False, heartbeatInterval=1
  )
  profiler.report(result, reportName='XpediteTest')
  return profiler.profiles, result

def runXpediteReport(runId, profileInfo, dataFilePath=None):
  """
  Run xpedite report

  @param dataFilePath: File path to override an app's sample file path
  to a data file in the test data directory
  """
  from xpedite.profiler.app import XpediteDormantApp
  xpediteApp = XpediteDormantApp(profileInfo.appName, profileInfo.appHost, profileInfo.appInfo, runId)
  if dataFilePath:
    xpediteApp.sampleFilePath = dataFilePath
  xpediteApp.start()
  reportProfiles, result = generateProfiles(xpediteApp, profileInfo)
  xpediteApp.stop()
  return reportProfiles, result

def runXpediteRecord(binary, profileInfo, remote):
  """
  Run xpedite record against a live target application process
  """
  with TargetLauncher(binary, profileInfo, remote) as app:
    recordProfiles, result = generateProfiles(app.xpediteApp, profileInfo)
  return app, recordProfiles, result

def loadProbes(binary, profileInfo, remote=None):
  """
  Generate a probe map to test the state of application probes
  """
  with TargetLauncher(binary, profileInfo, remote) as app:
    return ProbeAdmin.loadProbes(app.xpediteApp)

def loadBaseline():
  """
  Load a baseline .xpd file generated when a Jupyter notebook is built
  to compare to profile information from test record and report runs
  """
  from xpedite.jupyter.xpediteData import XpediteDataReader
  baselineProfileFile = os.path.join(dataDir, 'baseline.xpd')
  with XpediteDataReader(baselineProfileFile) as xpediteDataReader:
    profiles = xpediteDataReader.getData('profiles')
  return profiles

def collectDataFiles():
  """
  Collect data files from the test directory mapping xpedite run ids to data files for the run
  """
  dataFiles = {}
  for fileName in os.listdir(dataDir):
    if fileName.endswith('.data'):
      words = fileName.split('-')
      runId = (words[2])
      filePath = os.path.join(dataDir, fileName)
      dataFiles.update({runId : filePath})
  return dataFiles

def cleanUpDataDir():
  """
  Old .data files and .xpd files in the test data directory need to be removed
  before creating new files, or baseline comparison will fail
  """
  import glob
  for dataFile in glob.glob(os.path.join(dataDir, '*.data')):
    os.remove(dataFile)

def generateProfileInfo(binary, profileInfo, remote):
  """
  Use Xpedite's profile information generator to generate a new profileInfo.py
  file for an xpedite application and compare the new profile information to
  baseline profile information
  """
  from xpedite.profiler.profileInfoGenerator import ProfileInfoGenerator
  with TargetLauncher(binary, profileInfo, remote) as app:
    probes = ProbeAdmin.loadProbes(app.xpediteApp)
    profiler = os.path.join(os.path.dirname(testDir), 'scripts/bin/xpedite')
    profileInfo.appInfo = os.path.join(app.tempDir, 'xpedite-appinfo.txt')
    generator = ProfileInfoGenerator(
      app.xpediteApp.getBinaryName(), profileInfo.appHost, os.path.basename(profileInfo.appInfo),
      probes, profiler
    )
    generator.generate()
  return generator.filePath

def buildNotebook(binary, remote=None):
  """
  Test to confirm a Jupyter notebook can be creating from profile information and results
  generated by xpedite record
  """
  import tempfile
  import xpedite.jupyter.driver
  profileInfo = loadProfileInfo(os.path.join(dataDir, 'profileInfo.py'), remote)
  app, profiles, result = runXpediteRecord(binary, profileInfo, remote)
  tempDir = tempfile.mkdtemp()
  tempDataDir = os.path.join(tempDir, 'xpData')
  os.mkdir(tempDataDir)
  notebookPath = os.path.join(tempDir, 'xpediteTest.ipynb')
  dataFilePath = os.path.join(tempDir, 'xpData/xpediteTest.xpd')
  notebook = xpedite.jupyter.driver.buildNotebook(
    profileInfo.appName, result, profiles, notebookPath, dataFilePath, app.xpediteApp.runId
  )
  return notebook, dataFilePath, app, result
